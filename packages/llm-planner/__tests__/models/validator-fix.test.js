/**
 * Test to verify that the validator fixes work correctly
 */

import { describe, test, expect } from '@jest/globals';
import { Plan } from '../src/models/Plan.js';
import { PlanStep } from '../src/models/PlanStep.js';

describe('Fixed Validator Tests', () => {
  
  test('should handle hierarchical step dependencies correctly', () => {
    
    // Create a plan with hierarchical steps like the LLM generates
    const planData = {
      name: "Test Hierarchical Plan",
      description: "Test plan with hierarchical steps",
      steps: [
        {
          id: "step-1",
          name: "First Step", 
          dependencies: [],
          actions: [
            {
              type: "test_action",
              parameters: {}
            }
          ]
        },
        {
          id: "step-2",
          name: "Second Step with sub-steps",
          dependencies: ["step-1"],
          steps: [
            {
              id: "step-2.1",
              name: "Sub-step 2.1",
              dependencies: ["step-1"],
              actions: [
                {
                  type: "test_action",
                  parameters: {}
                }
              ]
            },
            {
              id: "step-2.2", 
              name: "Sub-step 2.2",
              dependencies: ["step-2.1"],
              actions: [
                {
                  type: "test_action",
                  parameters: {}
                }
              ]
            }
          ]
        },
        {
          id: "step-3",
          name: "Third Step depending on sub-steps",
          dependencies: ["step-2.1", "step-2.2"], // This should work now!
          actions: [
            {
              type: "test_action",
              parameters: {}
            }
          ]
        }
      ]
    };
    
    const allowableActions = [
      {
        type: "test_action",
        inputs: [],
        outputs: []
      }
    ];
    
    console.log('üìã Creating plan with hierarchical dependencies...');
    const plan = new Plan(planData, allowableActions);
    
    console.log('üîç Validating plan structure...');
    const validation = plan.validate();
    
    console.log('üìä Validation result:', {
      isValid: validation.isValid,
      errors: validation.errors
    });
    
    // This should pass now with the fixed validator
    expect(validation.isValid).toBe(true);
    expect(validation.errors).toHaveLength(0);
    
    console.log('‚úÖ Hierarchical dependency validation passed!');
  });
  
  test('should find hierarchical steps with getStep method', () => {
    
    const planData = {
      name: "Hierarchical Lookup Test",
      steps: [
        {
          id: "step-1",
          name: "Top level step"
        },
        {
          id: "step-2", 
          name: "Parent step",
          steps: [
            {
              id: "step-2.1",
              name: "Child step 1"
            },
            {
              id: "step-2.2",
              name: "Child step 2", 
              steps: [
                {
                  id: "step-2.2.1",
                  name: "Grandchild step"
                }
              ]
            }
          ]
        }
      ]
    };
    
    const plan = new Plan(planData);
    
    console.log('üîç Testing hierarchical step lookup...');
    
    // Should find top-level steps
    expect(plan.getStep("step-1")).toBeDefined();
    expect(plan.getStep("step-1").name).toBe("Top level step");
    
    // Should find child steps
    expect(plan.getStep("step-2.1")).toBeDefined();
    expect(plan.getStep("step-2.1").name).toBe("Child step 1");
    
    // Should find grandchild steps
    expect(plan.getStep("step-2.2.1")).toBeDefined(); 
    expect(plan.getStep("step-2.2.1").name).toBe("Grandchild step");
    
    // Should return undefined for non-existent steps
    expect(plan.getStep("step-99")).toBeUndefined();
    
    console.log('‚úÖ Hierarchical step lookup works correctly!');
  });
  
  test('should validate complex LLM-generated plan structure', () => {
    
    // This mimics the actual structure generated by the LLM
    const llmGeneratedPlan = {
      name: "Todo List Application Analysis Plan",
      description: "Analysis plan with complex hierarchical structure",
      inputs: ["requirements_text", "frontend_requirements", "backend_requirements"],
      requiredOutputs: ["project_type", "complexity"],
      steps: [
        {
          id: "step-1",
          name: "Determine Project Type",
          dependencies: [],
          actions: [
            {
              type: "determine_project_type",
              parameters: {}
            }
          ]
        },
        {
          id: "step-2",
          name: "Extract Features",
          dependencies: [],
          steps: [
            {
              id: "step-2.1", 
              name: "Extract Frontend Features",
              dependencies: [],
              actions: [
                {
                  type: "extract_frontend_features",
                  parameters: {}
                }
              ]
            },
            {
              id: "step-2.2",
              name: "Extract Backend Features", 
              dependencies: [],
              actions: [
                {
                  type: "extract_backend_features",
                  parameters: {}
                }
              ]
            }
          ]
        },
        {
          id: "step-3",
          name: "Analyze Complexity",
          dependencies: ["step-2.1", "step-2.2"], // Depends on sub-steps
          actions: [
            {
              type: "analyze_complexity",
              parameters: {}
            }
          ]
        },
        {
          id: "step-4",
          name: "Generate Summary",
          dependencies: ["step-1", "step-3"], // Mixed dependencies
          actions: [
            {
              type: "generate_analysis_summary", 
              parameters: {}
            }
          ]
        }
      ]
    };
    
    const allowableActions = [
      { type: "determine_project_type", inputs: ["requirements_text"], outputs: ["project_type"] },
      { type: "extract_frontend_features", inputs: ["requirements_text"], outputs: ["frontend_features"] },
      { type: "extract_backend_features", inputs: ["requirements_text"], outputs: ["backend_features"] },
      { type: "analyze_complexity", inputs: ["frontend_features", "backend_features"], outputs: ["complexity"] },
      { type: "generate_analysis_summary", inputs: ["project_type", "complexity"], outputs: ["summary"] }
    ];
    
    console.log('üìã Testing LLM-generated plan structure...');
    const plan = new Plan(llmGeneratedPlan, allowableActions);
    
    console.log('üîç Validating complex hierarchical plan...');
    const validation = plan.validate();
    
    console.log('üìä Complex plan validation:', {
      isValid: validation.isValid,
      errors: validation.errors,
      stepCount: plan.steps.length
    });
    
    // This should pass with the fixed validator
    expect(validation.isValid).toBe(true);
    expect(validation.errors).toHaveLength(0);
    
    // Verify step lookup works
    expect(plan.getStep("step-2.1")).toBeDefined();
    expect(plan.getStep("step-2.2")).toBeDefined();
    expect(plan.getStep("step-1")).toBeDefined();
    
    console.log('‚úÖ Complex LLM-generated plan validates successfully!');
  });
});