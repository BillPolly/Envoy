{
  "id": "simple-api-plan-with-webpage",
  "name": "Simple Node.js Addition API with Web Page",
  "description": "Build and test a Node.js API with one endpoint that adds two numbers, plus an interactive web page",
  "version": "1.0.0",
  "metadata": {
    "createdAt": "2025-07-30T00:00:00.000Z",
    "createdBy": "Legion Framework",
    "complexity": "simple",
    "profile": "nodejs-fullstack",
    "requiredModules": ["file", "js-generator", "package-manager", "command-executor", "node-runner", "playwright"]
  },
  "context": {},
  "inputs": [
    {
      "name": "ARTIFACT_DIR",
      "type": "string",
      "description": "Directory for generated artifacts and project files",
      "required": true
    }
  ],
  "requiredOutputs": ["screenshot_taken"],
  "steps": [
    {
      "id": "cleanup-tmp",
      "name": "Clean Temporary Directory",
      "description": "Remove old files from tmp directory",
      "type": "cleanup",
      "status": "pending",
      "dependencies": [],
      "inputs": [],
      "outputs": ["tmp_cleaned"],
      "estimatedDuration": 1000,
      "result": null,
      "actions": [
        {
          "id": "remove-old-files",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["cleanup_result"],
          "parameters": {
            "command": "rm -rf /tmp/simple-fullstack-app && mkdir -p /tmp/simple-fullstack-app",
            "timeout": 5000
          },
          "status": "pending",
          "result": null,
          "description": "Remove old API directory and create fresh one",
          "estimatedDuration": 1000
        }
      ]
    },
    {
      "id": "create-package",
      "name": "Create Package Configuration",
      "description": "Generate package.json with Express dependencies",
      "type": "configuration",
      "status": "pending",
      "dependencies": ["cleanup-tmp"],
      "inputs": [],
      "outputs": ["package_created"],
      "estimatedDuration": 2000,
      "result": null,
      "actions": [
        {
          "id": "generate-package-json",
          "type": "create_package_json",
          "inputs": ["name", "dependencies"],
          "outputs": ["package_file"],
          "parameters": {
            "name": "simple-addition-api-with-webpage",
            "version": "1.0.0",
            "description": "Simple API that adds two numbers with interactive web page",
            "projectPath": "/tmp/simple-fullstack-app",
            "main": "server.js",
            "scripts": {
              "start": "node server.js",
              "dev": "nodemon server.js"
            },
            "dependencies": {
              "express": "^4.18.0"
            },
            "devDependencies": {
              "nodemon": "^3.0.0"
            }
          },
          "status": "pending",
          "result": null,
          "description": "Create package.json with Express",
          "estimatedDuration": 500
        }
      ]
    },
    {
      "id": "install-dependencies",
      "name": "Install Node Dependencies",
      "description": "Install Express and other dependencies from package.json",
      "type": "installation",
      "status": "pending",
      "dependencies": ["create-package"],
      "inputs": [],
      "outputs": ["dependencies_installed"],
      "estimatedDuration": 15000,
      "result": null,
      "actions": [
        {
          "id": "npm-install",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["install_result"],
          "parameters": {
            "command": "cd /tmp/simple-fullstack-app && npm install",
            "timeout": 30000
          },
          "status": "pending",
          "result": null,
          "description": "Install all dependencies from package.json",
          "estimatedDuration": 15000
        }
      ]
    },
    {
      "id": "create-webpage",
      "name": "Generate Interactive Web Page with LLM",
      "description": "Use LLM to generate an HTML page with JavaScript to interact with the API",
      "type": "code-generation",
      "status": "pending",
      "dependencies": ["install-dependencies"],
      "inputs": [],
      "outputs": ["webpage_created"],
      "estimatedDuration": 3000,
      "result": null,
      "actions": [
        {
          "id": "create-public-directory",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["public_dir_created"],
          "parameters": {
            "command": "mkdir -p /tmp/simple-fullstack-app/public",
            "timeout": 5000
          },
          "status": "pending",
          "result": null,
          "description": "Create public directory for static files",
          "estimatedDuration": 500
        },
        {
          "id": "generate-html-page",
          "type": "generate_html_page",
          "inputs": ["title", "body", "css", "javascript"],
          "outputs": ["html_created"],
          "parameters": {
            "title": "üßÆ Addition Calculator",
            "description": "Interactive web calculator for adding two numbers using API",
            "favicon": "üßÆ",
            "projectPath": "/tmp/simple-fullstack-app",
            "writeToFile": true,
            "outputPath": "public/index.html",
            "css": {
              "inline": "body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 500px; margin: 50px auto; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; } .container { background: white; padding: 40px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); } h1 { color: #333; text-align: center; margin-bottom: 30px; font-size: 2em; } .form-group { margin-bottom: 20px; } label { display: block; margin-bottom: 8px; font-weight: 600; color: #555; } input[type=\"number\"] { width: 100%; padding: 12px; border: 2px solid #e1e5e9; border-radius: 8px; font-size: 16px; box-sizing: border-box; transition: border-color 0.3s ease; } input[type=\"number\"]:focus { border-color: #667eea; outline: none; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); } button { width: 100%; padding: 14px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-size: 18px; font-weight: 600; cursor: pointer; margin-top: 10px; transition: transform 0.2s ease; } button:hover { transform: translateY(-2px); } button:disabled { background: #cccccc; cursor: not-allowed; transform: none; } .result { margin-top: 25px; padding: 20px; border-radius: 8px; font-size: 18px; font-weight: 600; text-align: center; animation: fadeIn 0.3s ease; } .result.success { background: #d4edda; color: #155724; border: 2px solid #c3e6cb; } .result.error { background: #f8d7da; color: #721c24; border: 2px solid #f5c6cb; } .loading { color: #666; font-style: italic; } @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } } .api-status { text-align: center; margin-bottom: 20px; font-size: 14px; } .connected { color: #28a745; } .disconnected { color: #dc3545; }"
            },
            "body": {
              "content": "<div class=\"container\"><h1>üßÆ Addition Calculator</h1><div id=\"apiStatus\" class=\"api-status\">Connecting to API...</div><form id=\"calculatorForm\"><div class=\"form-group\"><label for=\"numberA\">First Number (a):</label><input type=\"number\" id=\"numberA\" name=\"a\" step=\"any\" required placeholder=\"Enter first number\"></div><div class=\"form-group\"><label for=\"numberB\">Second Number (b):</label><input type=\"number\" id=\"numberB\" name=\"b\" step=\"any\" required placeholder=\"Enter second number\"></div><button type=\"submit\" id=\"calculateBtn\">Calculate Sum</button></form><div id=\"result\" style=\"display: none;\"></div></div>"
            },
            "javascript": {
              "inline": "const form = document.getElementById('calculatorForm'); const resultDiv = document.getElementById('result'); const calculateBtn = document.getElementById('calculateBtn'); const apiStatus = document.getElementById('apiStatus'); form.addEventListener('submit', async function(e) { e.preventDefault(); const formData = new FormData(form); const a = parseFloat(formData.get('a')); const b = parseFloat(formData.get('b')); calculateBtn.disabled = true; calculateBtn.textContent = 'Calculating...'; resultDiv.style.display = 'block'; resultDiv.className = 'result loading'; resultDiv.textContent = 'Computing sum...'; try { const response = await fetch('/add', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ a, b }) }); const data = await response.json(); if (response.ok) { resultDiv.className = 'result success'; resultDiv.textContent = `${a} + ${b} = ${data.result}`; } else { resultDiv.className = 'result error'; resultDiv.textContent = `Error: ${data.error}`; } } catch (error) { resultDiv.className = 'result error'; resultDiv.textContent = `Network Error: ${error.message}`; } finally { calculateBtn.disabled = false; calculateBtn.textContent = 'Calculate Sum'; } });",
              "onLoad": "try { fetch('/health').then(response => { if (response.ok) { apiStatus.innerHTML = '‚úÖ <span class=\"connected\">Connected to API</span>'; } else { apiStatus.innerHTML = '‚ö†Ô∏è <span class=\"disconnected\">API Error</span>'; } }).catch(() => { apiStatus.innerHTML = '‚ùå <span class=\"disconnected\">Cannot connect to API</span>'; }); } catch (error) { console.error('Health check failed:', error); }"
            }
          },
          "status": "pending",
          "result": null,
          "description": "Generate interactive HTML calculator page using HTML generator tool",
          "estimatedDuration": 2000
        }
      ]
    },
    {
      "id": "generate-server",
      "name": "Generate Express Server with Static Files",
      "description": "Create server.js with addition endpoint and static file serving",
      "type": "code-generation",
      "status": "pending",
      "dependencies": ["create-webpage"],
      "inputs": [],
      "outputs": ["server_created"],
      "estimatedDuration": 3000,
      "result": null,
      "actions": [
        {
          "id": "create-server-file",
          "type": "generate_javascript_module",
          "inputs": ["functions", "writeToFile"],
          "outputs": ["server_code"],
          "parameters": {
            "name": "FullStackAPIServer",
            "projectPath": "/tmp/simple-fullstack-app",
            "writeToFile": true,
            "outputPath": "server.js",
            "functions": [
              {
                "name": "startServer",
                "params": [],
                "body": "const express = require('express');\nconst path = require('path');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(express.json());\napp.use((req, res, next) => {\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);\n  next();\n});\n\n// Serve static files from public directory\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Addition endpoint\napp.post('/add', (req, res) => {\n  try {\n    const { a, b } = req.body;\n    \n    if (typeof a !== 'number' || typeof b !== 'number') {\n      return res.status(400).json({ \n        error: 'Both a and b must be numbers' \n      });\n    }\n    \n    const result = a + b;\n    \n    console.log(`Adding ${a} + ${b} = ${result}`);\n    res.json({ result });\n  } catch (error) {\n    console.error('Addition error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n\n// Root redirect to web page\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n  console.log(`Web page: http://localhost:${PORT}/`);\n  console.log(`API test: curl -X POST http://localhost:${PORT}/add -H \"Content-Type: application/json\" -d '{\"a\": 5, \"b\": 3}'`);\n});",
                "jsdoc": {
                  "description": "Start the Express server with addition endpoint and static file serving",
                  "returns": "void - Server starts listening on specified port"
                }
              }
            ],
            "includeMain": true,
            "mainFunction": "startServer();"
          },
          "status": "pending",
          "result": null,
          "description": "Generate Express server with static file serving",
          "estimatedDuration": 1500
        }
      ]
    },
    {
      "id": "start-server",
      "name": "Start Full-Stack Server",
      "description": "Launch the Node.js server in background",
      "type": "execution",
      "status": "pending",
      "dependencies": ["generate-server"],
      "inputs": [],
      "outputs": ["server_running"],
      "estimatedDuration": 3000,
      "result": null,
      "actions": [
        {
          "id": "launch-server",
          "type": "start_web_server",
          "inputs": ["command", "cwd"],
          "outputs": ["server_process"],
          "parameters": {
            "command": "node server.js",
            "cwd": "/tmp/simple-fullstack-app",
            "id": "fullstack-server"
          },
          "status": "pending",
          "result": null,
          "description": "Start web server using node-runner",
          "estimatedDuration": 2000
        },
        {
          "id": "wait-for-startup",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["startup_wait"],
          "parameters": {
            "command": "sleep 3 && curl -s http://localhost:3000/health && echo ' - Server is ready!'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Wait for server startup and verify with health check",
          "estimatedDuration": 5000
        }
      ]
    },
    {
      "id": "test-api",
      "name": "Test API with Curl",
      "description": "Test the addition endpoint with curl requests",
      "type": "testing",
      "status": "pending",
      "dependencies": ["start-server"],
      "inputs": [],
      "outputs": ["api_tested"],
      "estimatedDuration": 5000,
      "result": null,
      "actions": [
        {
          "id": "test-health-endpoint",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["health_result"],
          "parameters": {
            "command": "curl -s http://localhost:3000/health",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test health check endpoint",
          "estimatedDuration": 1000
        },
        {
          "id": "test-addition-basic",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["addition_result"],
          "parameters": {
            "command": "curl -s -X POST http://localhost:3000/add -H \"Content-Type: application/json\" -d '{\"a\": 5, \"b\": 3}'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test basic addition: 5 + 3 = 8",
          "estimatedDuration": 1000
        },
        {
          "id": "test-addition-negative",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["negative_result"],
          "parameters": {
            "command": "curl -s -X POST http://localhost:3000/add -H \"Content-Type: application/json\" -d '{\"a\": -2, \"b\": 7}'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test with negative number: -2 + 7 = 5",
          "estimatedDuration": 1000
        },
        {
          "id": "test-error-case",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["error_result"],
          "parameters": {
            "command": "curl -s -X POST http://localhost:3000/add -H \"Content-Type: application/json\" -d '{\"a\": \"not_a_number\", \"b\": 3}'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test error handling with invalid input",
          "estimatedDuration": 1000
        }
      ]
    },
    {
      "id": "test-webpage",
      "name": "Test Web Page with Curl",
      "description": "Test the HTML web page and its functionality",
      "type": "testing",
      "status": "pending",
      "dependencies": ["test-api"],
      "inputs": [],
      "outputs": ["web_tested"],
      "estimatedDuration": 4000,
      "result": null,
      "actions": [
        {
          "id": "test-homepage",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["homepage_result"],
          "parameters": {
            "command": "curl -s http://localhost:3000/ | head -5",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test homepage serves HTML correctly",
          "estimatedDuration": 1000
        },
        {
          "id": "test-html-title",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["title_result"],
          "parameters": {
            "command": "curl -s http://localhost:3000/ | grep -o '<title>.*</title>'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Verify HTML page title is correct",
          "estimatedDuration": 1000
        },
        {
          "id": "test-html-calculator-form",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["form_result"],
          "parameters": {
            "command": "curl -s http://localhost:3000/ | grep -c 'calculatorForm'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Verify calculator form is present in HTML",
          "estimatedDuration": 1000
        },
        {
          "id": "test-static-file-serving",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["static_result"],
          "parameters": {
            "command": "curl -s -I http://localhost:3000/ | grep 'Content-Type: text/html'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Verify server serves HTML with correct content type",
          "estimatedDuration": 1000
        }
      ]
    },
    {
      "id": "screenshot-webpage",
      "name": "Take Screenshot of Web Page",
      "description": "Use Playwright to navigate to the web page and take a screenshot",
      "type": "testing",
      "status": "pending",
      "dependencies": ["test-webpage"],
      "inputs": [],
      "outputs": ["screenshot_taken"],
      "estimatedDuration": 5000,
      "result": null,
      "actions": [
        {
          "id": "navigate-to-page",
          "type": "navigate_to_page",
          "inputs": ["url"],
          "outputs": ["navigation_result"],
          "parameters": {
            "url": "http://localhost:3000/",
            "waitUntil": "load",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Navigate to the calculator web page",
          "estimatedDuration": 2000
        },
        {
          "id": "take-page-screenshot",
          "type": "take_screenshot",
          "inputs": ["fullPage", "format"],
          "outputs": ["screenshot_data"],
          "parameters": {
            "fullPage": true,
            "format": "png"
          },
          "status": "pending",
          "result": null,
          "description": "Take full page screenshot of the calculator",
          "estimatedDuration": 2000
        },
        {
          "id": "save-screenshot-file",
          "type": "file_operations",
          "inputs": ["filePath", "content"],
          "outputs": ["screenshot_file"],
          "parameters": {
            "filepath": "/tmp/simple-fullstack-app/calculator-screenshot.png",
            "content": "${actions.take-page-screenshot.result.screenshot}"
          },
          "status": "pending",
          "result": null,
          "description": "Save screenshot to artifact directory",
          "estimatedDuration": 1000
        }
      ]
    },
    {
      "id": "stop-server",
      "name": "Stop Full-Stack Server",
      "description": "Gracefully stop the Node.js server",
      "type": "cleanup",
      "status": "pending",
      "dependencies": ["screenshot-webpage"],
      "inputs": [],
      "outputs": ["server_stopped"],
      "estimatedDuration": 2000,
      "result": null,
      "actions": [
        {
          "id": "kill-server-process",
          "type": "stop_process",
          "inputs": ["id"],
          "outputs": ["kill_result"],
          "parameters": {
            "id": "fullstack-server"
          },
          "status": "pending",
          "result": null,
          "description": "Stop server process using node-runner",
          "estimatedDuration": 1000
        },
        {
          "id": "verify-stopped",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["verify_result"],
          "parameters": {
            "command": "curl -s --connect-timeout 2 http://localhost:3000/health || echo 'Server stopped successfully'",
            "timeout": 5000
          },
          "status": "pending",
          "result": null,
          "description": "Verify server is stopped",
          "estimatedDuration": 1000
        }
      ]
    }
  ],
  "executionOrder": [
    "cleanup-tmp",
    "create-package", 
    "install-dependencies",
    "create-webpage",
    "generate-server",
    "start-server",
    "test-api",
    "test-webpage",
    "screenshot-webpage",
    "stop-server"
  ],
  "successCriteria": [
    {
      "description": "Temporary directory cleaned successfully",
      "condition": "${steps.cleanup-tmp.success}"
    },
    {
      "description": "Package.json created with Express dependency",
      "condition": "${steps.create-package.success}"
    },
    {
      "description": "Dependencies installed successfully",
      "condition": "${steps.install-dependencies.success}"
    },
    {
      "description": "Interactive web page created",
      "condition": "${steps.create-webpage.success}"
    },
    {
      "description": "Full-stack server code generated successfully",
      "condition": "${steps.generate-server.success}"
    },
    {
      "description": "Server started and accessible",
      "condition": "${steps.start-server.success}"
    },
    {
      "description": "All API endpoints tested successfully",
      "condition": "${steps.test-api.success}"
    },
    {
      "description": "Web page tested and working",
      "condition": "${steps.test-webpage.success}"
    },
    {
      "description": "Screenshot taken and saved to directory",
      "condition": "${steps.screenshot-webpage.success}"
    },
    {
      "description": "Server stopped cleanly",
      "condition": "${steps.stop-server.success}"
    }
  ]
}