{
  "id": "simple-api-plan",
  "name": "Simple Node.js Addition API",
  "description": "Build and test a simple Node.js API with one endpoint that adds two numbers",
  "version": "1.0.0",
  "metadata": {
    "createdAt": "2025-07-30T00:00:00.000Z",
    "createdBy": "Legion Framework",
    "complexity": "simple",
    "profile": "nodejs-api",
    "requiredModules": ["file", "js-generator", "package-manager", "command-executor"]
  },
  "context": {},
  "inputs": [
    {
      "name": "ARTIFACT_DIR",
      "type": "string",
      "description": "Directory for generated artifacts and project files",
      "required": true
    }
  ],
  "requiredOutputs": ["api_tested"],
  "steps": [
    {
      "id": "cleanup-tmp",
      "name": "Clean Temporary Directory",
      "description": "Remove old files from tmp directory",
      "type": "cleanup",
      "status": "pending",
      "dependencies": [],
      "inputs": [],
      "outputs": ["tmp_cleaned"],
      "estimatedDuration": 1000,
      "result": null,
      "actions": [
        {
          "id": "remove-old-files",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["cleanup_result"],
          "parameters": {
            "command": "rm -rf ${ARTIFACT_DIR} && mkdir -p ${ARTIFACT_DIR}",
            "timeout": 5000
          },
          "status": "pending",
          "result": null,
          "description": "Remove old API directory and create fresh one",
          "estimatedDuration": 1000
        }
      ]
    },
    {
      "id": "create-package",
      "name": "Create Package Configuration",
      "description": "Generate package.json with Express dependencies",
      "type": "configuration",
      "status": "pending",
      "dependencies": ["cleanup-tmp"],
      "inputs": [],
      "outputs": ["package_created"],
      "estimatedDuration": 2000,
      "result": null,
      "actions": [
        {
          "id": "generate-package-json",
          "type": "create_package_json",
          "inputs": ["name", "dependencies"],
          "outputs": ["package_file"],
          "parameters": {
            "name": "simple-addition-api",
            "version": "1.0.0",
            "description": "Simple API that adds two numbers",
            "projectPath": "${ARTIFACT_DIR}",
            "main": "server.js",
            "scripts": {
              "start": "node server.js",
              "dev": "nodemon server.js"
            },
            "dependencies": {
              "express": "^4.18.0"
            },
            "devDependencies": {
              "nodemon": "^3.0.0"
            }
          },
          "status": "pending",
          "result": null,
          "description": "Create package.json with Express",
          "estimatedDuration": 500
        }
      ]
    },
    {
      "id": "install-dependencies",
      "name": "Install Node Dependencies",
      "description": "Install Express and other dependencies from package.json",
      "type": "installation",
      "status": "pending",
      "dependencies": ["create-package"],
      "inputs": [],
      "outputs": ["dependencies_installed"],
      "estimatedDuration": 15000,
      "result": null,
      "actions": [
        {
          "id": "npm-install",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["install_result"],
          "parameters": {
            "command": "cd ${ARTIFACT_DIR} && npm install",
            "timeout": 30000
          },
          "status": "pending",
          "result": null,
          "description": "Install all dependencies from package.json",
          "estimatedDuration": 15000
        }
      ]
    },
    {
      "id": "generate-server",
      "name": "Generate Express Server",
      "description": "Create server.js with addition endpoint",
      "type": "code-generation",
      "status": "pending",
      "dependencies": ["install-dependencies"],
      "inputs": [],
      "outputs": ["server_created"],
      "estimatedDuration": 3000,
      "result": null,
      "actions": [
        {
          "id": "create-server-file",
          "type": "generate_javascript_module",
          "inputs": ["functions", "writeToFile"],
          "outputs": ["server_code"],
          "parameters": {
            "name": "SimpleAPIServer",
            "projectPath": "${ARTIFACT_DIR}",
            "writeToFile": true,
            "outputPath": "server.js",
            "functions": [
              {
                "name": "startServer",
                "params": [],
                "body": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(express.json());\napp.use((req, res, next) => {\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);\n  next();\n});\n\n// Addition endpoint\napp.post('/add', (req, res) => {\n  try {\n    const { a, b } = req.body;\n    \n    if (typeof a !== 'number' || typeof b !== 'number') {\n      return res.status(400).json({ \n        error: 'Both a and b must be numbers' \n      });\n    }\n    \n    const result = a + b;\n    \n    console.log(`Adding ${a} + ${b} = ${result}`);\n    res.json({ result });\n  } catch (error) {\n    console.error('Addition error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n  console.log(`Test with: curl -X POST http://localhost:${PORT}/add -H \"Content-Type: application/json\" -d '{\"a\": 5, \"b\": 3}'`);\n});",
                "jsdoc": {
                  "description": "Start the Express server with addition endpoint",
                  "returns": "void - Server starts listening on specified port"
                }
              }
            ],
            "includeMain": true,
            "mainFunction": "startServer();"
          },
          "status": "pending",
          "result": null,
          "description": "Generate Express server with /add endpoint",
          "estimatedDuration": 1500
        }
      ]
    },
    {
      "id": "start-server",
      "name": "Start API Server",
      "description": "Launch the Node.js server in background",
      "type": "execution",
      "status": "pending",
      "dependencies": ["generate-server"],
      "inputs": [],
      "outputs": ["server_running"],
      "estimatedDuration": 3000,
      "result": null,
      "actions": [
        {
          "id": "launch-server",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["server_process"],
          "parameters": {
            "command": "cd ${ARTIFACT_DIR} && node server.js &",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Start server in background",
          "estimatedDuration": 2000
        },
        {
          "id": "wait-for-startup",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["startup_wait"],
          "parameters": {
            "command": "sleep 15",
            "timeout": 20000
          },
          "status": "pending",
          "result": null,
          "description": "Wait for server to start",
          "estimatedDuration": 15000
        }
      ]
    },
    {
      "id": "test-api",
      "name": "Test API with Curl",
      "description": "Test the addition endpoint with curl requests",
      "type": "testing",
      "status": "pending",
      "dependencies": ["start-server"],
      "inputs": [],
      "outputs": ["api_tested"],
      "estimatedDuration": 5000,
      "result": null,
      "actions": [
        {
          "id": "test-health-endpoint",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["health_result"],
          "parameters": {
            "command": "curl -s http://localhost:3000/health",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test health check endpoint",
          "estimatedDuration": 1000
        },
        {
          "id": "test-addition-basic",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["addition_result"],
          "parameters": {
            "command": "curl -s -X POST http://localhost:3000/add -H \"Content-Type: application/json\" -d '{\"a\": 5, \"b\": 3}'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test basic addition: 5 + 3 = 8",
          "estimatedDuration": 1000
        },
        {
          "id": "test-addition-negative",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["negative_result"],
          "parameters": {
            "command": "curl -s -X POST http://localhost:3000/add -H \"Content-Type: application/json\" -d '{\"a\": -2, \"b\": 7}'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test with negative number: -2 + 7 = 5",
          "estimatedDuration": 1000
        },
        {
          "id": "test-error-case",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["error_result"],
          "parameters": {
            "command": "curl -s -X POST http://localhost:3000/add -H \"Content-Type: application/json\" -d '{\"a\": \"not_a_number\", \"b\": 3}'",
            "timeout": 10000
          },
          "status": "pending",
          "result": null,
          "description": "Test error handling with invalid input",
          "estimatedDuration": 1000
        }
      ]
    },
    {
      "id": "stop-server",
      "name": "Stop API Server",
      "description": "Gracefully stop the Node.js server",
      "type": "cleanup",
      "status": "pending",
      "dependencies": ["test-api"],
      "inputs": [],
      "outputs": ["server_stopped"],
      "estimatedDuration": 2000,
      "result": null,
      "actions": [
        {
          "id": "kill-server-process",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["kill_result"],
          "parameters": {
            "command": "pkill -f \"node server.js\" || true",
            "timeout": 5000
          },
          "status": "pending",
          "result": null,
          "description": "Kill server process",
          "estimatedDuration": 1000
        },
        {
          "id": "verify-stopped",
          "type": "command_executor",
          "inputs": ["command"],
          "outputs": ["verify_result"],
          "parameters": {
            "command": "curl -s --connect-timeout 2 http://localhost:3000/health || echo 'Server stopped successfully'",
            "timeout": 5000
          },
          "status": "pending",
          "result": null,
          "description": "Verify server is stopped",
          "estimatedDuration": 1000
        }
      ]
    }
  ],
  "executionOrder": [
    "cleanup-tmp",
    "create-package", 
    "generate-server",
    "start-server",
    "test-api",
    "stop-server"
  ],
  "successCriteria": [
    {
      "description": "Temporary directory cleaned successfully",
      "condition": "${steps.cleanup-tmp.success}"
    },
    {
      "description": "Package.json created with Express dependency",
      "condition": "${steps.create-package.success}"
    },
    {
      "description": "Server code generated successfully",
      "condition": "${steps.generate-server.success}"
    },
    {
      "description": "Server started and accessible",
      "condition": "${steps.start-server.success}"
    },
    {
      "description": "All API endpoints tested successfully",
      "condition": "${steps.test-api.success}"
    },
    {
      "description": "Server stopped cleanly",
      "condition": "${steps.stop-server.success}"
    }
  ]
}