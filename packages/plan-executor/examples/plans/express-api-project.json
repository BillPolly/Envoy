{
  "id": "express-api-project",
  "name": "Create Express.js API Project",
  "description": "Create a complete Express.js REST API project with routes, middleware, tests, and deployment configuration",
  "version": "1.0.0",
  "author": "Legion Plan System",
  "tags": ["javascript", "express", "api", "rest", "advanced", "modular"],
  "inputs": [
    {
      "name": "project_name",
      "type": "string",
      "description": "Name of the API project",
      "required": true
    },
    {
      "name": "project_path",
      "type": "string",
      "description": "Directory path where project should be created",
      "required": true
    },
    {
      "name": "api_version",
      "type": "string",
      "description": "API version (e.g., v1, v2)",
      "default": "v1"
    },
    {
      "name": "port",
      "type": "number",
      "description": "Port number for the API server",
      "default": 3000
    }
  ],
  "outputs": [
    {
      "name": "api_created",
      "type": "boolean",
      "description": "Whether the API project was successfully created"
    },
    {
      "name": "server_url",
      "type": "string", 
      "description": "URL where the API server can be accessed"
    },
    {
      "name": "endpoints_tested",
      "type": "boolean",
      "description": "Whether all API endpoints pass tests"
    }
  ],
  "steps": [
    {
      "id": "setup-project-structure",
      "name": "Setup Project Structure",
      "type": "setup",
      "description": "Create complete directory structure for Express API",
      "actions": [
        {
          "type": "create_directory",
          "parameters": {
            "dirpath": "${inputs.project_path}/${inputs.project_name}"
          }
        },
        {
          "type": "create_directory", 
          "parameters": {
            "dirpath": "${inputs.project_path}/${inputs.project_name}/src"
          }
        },
        {
          "type": "create_directory",
          "parameters": {
            "dirpath": "${inputs.project_path}/${inputs.project_name}/src/routes"
          }
        },
        {
          "type": "create_directory",
          "parameters": {
            "dirpath": "${inputs.project_path}/${inputs.project_name}/src/middleware"
          }
        },
        {
          "type": "create_directory",
          "parameters": {
            "dirpath": "${inputs.project_path}/${inputs.project_name}/src/controllers"
          }
        },
        {
          "type": "create_directory",
          "parameters": {
            "dirpath": "${inputs.project_path}/${inputs.project_name}/__tests__"
          }
        }
      ],
      "outputs": {
        "project_dir": "${inputs.project_path}/${inputs.project_name}"
      }
    },
    {
      "id": "create-express-package",
      "name": "Create Package Configuration",
      "type": "configuration",
      "description": "Generate package.json with Express.js dependencies",
      "dependencies": ["setup-project-structure"],
      "actions": [
        {
          "type": "create_package_json",
          "module": "package-manager",
          "parameters": {
            "name": "${inputs.project_name}",
            "version": "1.0.0",
            "description": "Express.js REST API created with Legion",
            "projectPath": "${steps.setup-project-structure.outputs.project_dir}",
            "scripts": {
              "start": "node src/server.js",
              "dev": "nodemon src/server.js",
              "test": "jest",
              "test:watch": "jest --watch",
              "test:coverage": "jest --coverage"
            },
            "dependencies": ["express", "cors", "helmet", "dotenv"],
            "devDependencies": ["jest", "supertest", "nodemon"]
          }
        }
      ]
    },
    {
      "id": "generate-server-module",
      "name": "Generate Express Server",
      "type": "code-generation",
      "description": "Create the main Express server application",
      "dependencies": ["setup-project-structure"],
      "actions": [
        {
          "type": "generate_javascript_module",
          "module": "js-generator",
          "parameters": {
            "module_name": "server",
            "imports": [
              "const express = require('express');",
              "const cors = require('cors');",
              "const helmet = require('helmet');",
              "require('dotenv').config();"
            ],
            "classes": [
              {
                "name": "APIServer",
                "methods": [
                  {
                    "name": "constructor",
                    "params": ["port = ${inputs.port}"],
                    "body": "this.app = express();\\n    this.port = port;\\n    this.setupMiddleware();\\n    this.setupRoutes();"
                  },
                  {
                    "name": "setupMiddleware",
                    "params": [],
                    "body": "this.app.use(helmet());\\n    this.app.use(cors());\\n    this.app.use(express.json());\\n    this.app.use(express.urlencoded({ extended: true }));"
                  },
                  {
                    "name": "setupRoutes",
                    "params": [],
                    "body": "// Health check endpoint\\n    this.app.get('/health', (req, res) => {\\n      res.json({ status: 'OK', timestamp: new Date().toISOString() });\\n    });\\n    \\n    // API routes\\n    this.app.get('/api/${inputs.api_version}/hello', (req, res) => {\\n      res.json({ message: 'Hello from ${inputs.project_name} API!' });\\n    });\\n    \\n    // 404 handler\\n    this.app.use('*', (req, res) => {\\n      res.status(404).json({ error: 'Endpoint not found' });\\n    });"
                  },
                  {
                    "name": "start",
                    "params": [],
                    "body": "return new Promise((resolve) => {\\n      this.server = this.app.listen(this.port, () => {\\n        console.log(`API Server running on port ${this.port}`);\\n        resolve(this.server);\\n      });\\n    });"
                  },
                  {
                    "name": "stop",
                    "params": [],
                    "body": "if (this.server) {\\n      this.server.close();\\n    }"
                  }
                ]
              }
            ],
            "functions": [
              {
                "name": "createServer",
                "params": ["port"],
                "body": "return new APIServer(port);",
                "jsdoc": {
                  "description": "Factory function to create API server instance",
                  "params": [{"name": "port", "type": "number", "description": "Port number for server"}],
                  "returns": "APIServer - Server instance"
                }
              }
            ],
            "exports": ["APIServer", "createServer"]
          }
        }
      ],
      "actions_post": [
        {
          "type": "write_file",
          "parameters": {
            "filepath": "${steps.setup-project-structure.outputs.project_dir}/src/server.js",
            "content": "${actions[0].outputs.module_content}\\n\\n// Start server if this is the main module\\nif (require.main === module) {\\n  const server = createServer(process.env.PORT || ${inputs.port});\\n  server.start();\\n}"
          }
        }
      ]
    },
    {
      "id": "generate-api-routes",
      "name": "Generate API Routes Module",
      "type": "code-generation", 
      "description": "Create modular route handlers",
      "dependencies": ["setup-project-structure"],
      "actions": [
        {
          "type": "generate_javascript_module",
          "module": "js-generator",
          "parameters": {
            "module_name": "userRoutes",
            "imports": [
              "const express = require('express');",
              "const router = express.Router();"
            ],
            "functions": [
              {
                "name": "getAllUsers",
                "params": ["req", "res"],
                "body": "// Mock user data\\n  const users = [\\n    { id: 1, name: 'John Doe', email: 'john@example.com' },\\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com' }\\n  ];\\n  res.json(users);",
                "jsdoc": {
                  "description": "Get all users endpoint",
                  "params": [
                    {"name": "req", "type": "object", "description": "Express request object"},
                    {"name": "res", "type": "object", "description": "Express response object"}
                  ]
                }
              },
              {
                "name": "getUserById", 
                "params": ["req", "res"],
                "body": "const id = parseInt(req.params.id);\\n  const user = { id, name: `User ${id}`, email: `user${id}@example.com` };\\n  res.json(user);",
                "jsdoc": {
                  "description": "Get user by ID endpoint"
                }
              },
              {
                "name": "createUser",
                "params": ["req", "res"],
                "body": "const { name, email } = req.body;\\n  if (!name || !email) {\\n    return res.status(400).json({ error: 'Name and email are required' });\\n  }\\n  const user = { id: Date.now(), name, email };\\n  res.status(201).json(user);",
                "jsdoc": {
                  "description": "Create new user endpoint"
                }
              }
            ],
            "additionalCode": [
              "// Route definitions",
              "router.get('/', getAllUsers);",
              "router.get('/:id', getUserById);", 
              "router.post('/', createUser);",
              "",
              "module.exports = router;"
            ]
          }
        }
      ],
      "actions_post": [
        {
          "type": "write_file",
          "parameters": {
            "filepath": "${steps.setup-project-structure.outputs.project_dir}/src/routes/users.js",
            "content": "${actions[0].outputs.module_content}"
          }
        }
      ]
    },
    {
      "id": "generate-middleware",
      "name": "Generate Custom Middleware",
      "type": "code-generation",
      "description": "Create logging and error handling middleware",
      "dependencies": ["setup-project-structure"],
      "actions": [
        {
          "type": "generate_javascript_module", 
          "module": "js-generator",
          "parameters": {
            "module_name": "middleware",
            "functions": [
              {
                "name": "requestLogger",
                "params": ["req", "res", "next"],
                "body": "const timestamp = new Date().toISOString();\\n  console.log(`[${timestamp}] ${req.method} ${req.url}`);\\n  next();",
                "jsdoc": {
                  "description": "Log incoming requests with timestamps"
                }
              },
              {
                "name": "errorHandler",
                "params": ["err", "req", "res", "next"],
                "body": "console.error('Error:', err.message);\\n  res.status(500).json({\\n    error: 'Internal Server Error',\\n    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'\\n  });",
                "jsdoc": {
                  "description": "Global error handling middleware"
                }
              },
              {
                "name": "validateApiKey",
                "params": ["req", "res", "next"],
                "body": "const apiKey = req.headers['x-api-key'];\\n  if (!apiKey) {\\n    return res.status(401).json({ error: 'API key required' });\\n  }\\n  // In real app, validate against database\\n  if (apiKey !== 'demo-key-123') {\\n    return res.status(403).json({ error: 'Invalid API key' });\\n  }\\n  next();",
                "jsdoc": {
                  "description": "API key validation middleware"
                }
              }
            ],
            "exports": ["requestLogger", "errorHandler", "validateApiKey"]
          }
        }
      ],
      "actions_post": [
        {
          "type": "write_file",
          "parameters": {
            "filepath": "${steps.setup-project-structure.outputs.project_dir}/src/middleware/index.js",
            "content": "${actions[0].outputs.module_content}"
          }
        }
      ]
    },
    {
      "id": "generate-api-tests",
      "name": "Generate API Integration Tests",
      "type": "test-generation",
      "description": "Create comprehensive tests for API endpoints",
      "dependencies": ["generate-server-module", "generate-api-routes"],
      "actions": [
        {
          "type": "generate_unit_tests",
          "module": "js-generator", 
          "parameters": {
            "target_file": "../src/server.js",
            "test_cases": [
              {
                "function": "API endpoints",
                "description": "should respond to health check",
                "setup": "const request = require('supertest');\\n  const { createServer } = require('../src/server');\\n  let server;\\n  \\n  beforeAll(async () => {\\n    server = createServer(0);\\n    await server.start();\\n  });\\n  \\n  afterAll(() => {\\n    server.stop();\\n  });",
                "expectations": [
                  {
                    "type": "custom",
                    "code": "const response = await request(server.app).get('/health');\\n    expect(response.status).toBe(200);\\n    expect(response.body.status).toBe('OK');"
                  }
                ]
              },
              {
                "function": "API endpoints",
                "description": "should respond to hello endpoint",
                "expectations": [
                  {
                    "type": "custom",
                    "code": "const response = await request(server.app).get('/api/${inputs.api_version}/hello');\\n    expect(response.status).toBe(200);\\n    expect(response.body.message).toContain('${inputs.project_name}');"
                  }
                ]
              },
              {
                "function": "API endpoints",
                "description": "should return 404 for unknown routes",
                "expectations": [
                  {
                    "type": "custom",
                    "code": "const response = await request(server.app).get('/unknown');\\n    expect(response.status).toBe(404);\\n    expect(response.body.error).toBe('Endpoint not found');"
                  }
                ]
              }
            ]
          }
        }
      ],
      "actions_post": [
        {
          "type": "write_file",
          "parameters": {
            "filepath": "${steps.setup-project-structure.outputs.project_dir}/__tests__/api.test.js",
            "content": "${actions[0].outputs.test_content}"
          }
        }
      ]
    },
    {
      "id": "install-api-dependencies",
      "name": "Install Express Dependencies",
      "type": "setup",
      "description": "Install all required npm packages",
      "dependencies": ["create-express-package"],
      "actions": [
        {
          "type": "install_packages",
          "module": "package-manager",
          "parameters": {
            "packages": ["express", "cors", "helmet", "dotenv"],
            "dev": false,
            "projectPath": "${steps.setup-project-structure.outputs.project_dir}"
          }
        },
        {
          "type": "install_packages",
          "module": "package-manager", 
          "parameters": {
            "packages": ["jest", "supertest", "nodemon"],
            "dev": true,
            "projectPath": "${steps.setup-project-structure.outputs.project_dir}"
          }
        }
      ]
    },
    {
      "id": "validate-server-code",
      "name": "Validate Server Code",
      "type": "validation",
      "description": "Run security and quality checks on generated code",
      "dependencies": ["generate-server-module", "generate-api-routes", "generate-middleware"],
      "actions": [
        {
          "type": "validate_javascript",
          "module": "code-analysis",
          "parameters": {
            "filePath": "${steps.setup-project-structure.outputs.project_dir}/src/server.js",
            "includeAnalysis": true,
            "checkSecurity": true,
            "checkPerformance": true
          }
        },
        {
          "type": "validate_javascript",
          "module": "code-analysis",
          "parameters": {
            "filePath": "${steps.setup-project-structure.outputs.project_dir}/src/routes/users.js",
            "includeAnalysis": true,
            "checkSecurity": true,
            "checkPerformance": true
          }
        }
      ],
      "validation": {
        "conditions": [
          {
            "field": "actions[0].outputs.valid",
            "operator": "equals",
            "value": true,
            "error_message": "Server code failed validation"
          },
          {
            "field": "actions[1].outputs.valid", 
            "operator": "equals",
            "value": true,
            "error_message": "Routes code failed validation"
          }
        ]
      }
    },
    {
      "id": "run-api-tests",
      "name": "Run API Test Suite",
      "type": "testing",
      "description": "Execute integration tests for all API endpoints",
      "dependencies": ["generate-api-tests", "install-api-dependencies"],
      "actions": [
        {
          "type": "run_tests",
          "module": "jester",
          "parameters": {
            "projectPath": "${steps.setup-project-structure.outputs.project_dir}",
            "pattern": "__tests__/**/*.test.js",
            "config": {
              "coverage": true,
              "verbose": true,
              "testTimeout": 10000
            }
          }
        }
      ],
      "validation": {
        "conditions": [
          {
            "field": "actions[0].outputs.success",
            "operator": "equals",
            "value": true,
            "error_message": "API tests are failing"
          }
        ]
      }
    },
    {
      "id": "create-env-template",
      "name": "Create Environment Template",
      "type": "configuration",
      "description": "Generate .env template and documentation",
      "dependencies": ["setup-project-structure"],
      "actions": [
        {
          "type": "write_file",
          "parameters": {
            "filepath": "${steps.setup-project-structure.outputs.project_dir}/.env.example",
            "content": "# Server Configuration\\nPORT=${inputs.port}\\nNODE_ENV=development\\n\\n# API Configuration\\nAPI_VERSION=${inputs.api_version}\\n\\n# Security\\nAPI_KEY=demo-key-123\\n\\n# Database (add when needed)\\n# DATABASE_URL=\\n\\n# External Services (add when needed)\\n# REDIS_URL=\\n"
          }
        },
        {
          "type": "write_file",
          "parameters": {
            "filepath": "${steps.setup-project-structure.outputs.project_dir}/.env",
            "content": "PORT=${inputs.port}\\nNODE_ENV=development\\nAPI_VERSION=${inputs.api_version}\\nAPI_KEY=demo-key-123\\n"
          }
        }
      ]
    },
    {
      "id": "create-api-documentation",
      "name": "Create API Documentation",
      "type": "documentation",
      "description": "Generate comprehensive README with API documentation",
      "dependencies": ["setup-project-structure"],
      "actions": [
        {
          "type": "write_file",
          "parameters": {
            "filepath": "${steps.setup-project-structure.outputs.project_dir}/README.md",
            "content": "# ${inputs.project_name}\\n\\nExpress.js REST API created with Legion modular code generation.\\n\\n## Features\\n\\n- Express.js web framework\\n- CORS and security middleware (Helmet)\\n- Environment configuration\\n- Comprehensive testing with Jest\\n- Modular route structure\\n- Error handling middleware\\n- API key authentication\\n\\n## Installation\\n\\n```bash\\nnpm install\\n```\\n\\n## Environment Setup\\n\\nCopy the environment template:\\n\\n```bash\\ncp .env.example .env\\n```\\n\\nEdit `.env` with your configuration.\\n\\n## Usage\\n\\n### Development\\n\\n```bash\\nnpm run dev\\n```\\n\\n### Production\\n\\n```bash\\nnpm start\\n```\\n\\n### Testing\\n\\n```bash\\nnpm test\\n```\\n\\n## API Endpoints\\n\\n### Health Check\\n\\n```\\nGET /health\\n```\\n\\nReturns server health status.\\n\\n### Hello World\\n\\n```\\nGET /api/${inputs.api_version}/hello\\n```\\n\\nReturns a welcome message.\\n\\n### User Management\\n\\n```\\nGET /api/${inputs.api_version}/users       # Get all users\\nGET /api/${inputs.api_version}/users/:id   # Get user by ID\\nPOST /api/${inputs.api_version}/users      # Create new user\\n```\\n\\n**Note:** User endpoints require API key in `x-api-key` header.\\n\\n## Project Structure\\n\\n```\\n${inputs.project_name}/\\n├── src/\\n│   ├── server.js           # Main server application\\n│   ├── routes/\\n│   │   └── users.js        # User route handlers\\n│   ├── middleware/\\n│   │   └── index.js        # Custom middleware\\n│   └── controllers/        # Controllers (add as needed)\\n├── __tests__/\\n│   └── api.test.js         # API integration tests\\n├── .env                    # Environment variables\\n├── .env.example            # Environment template\\n├── package.json            # Project configuration\\n└── README.md               # This file\\n```\\n\\n## Development Guidelines\\n\\n1. **Routes**: Add new routes in `src/routes/`\\n2. **Middleware**: Add custom middleware in `src/middleware/`\\n3. **Controllers**: Add business logic in `src/controllers/`\\n4. **Tests**: Add tests in `__tests__/` directory\\n5. **Environment**: Use environment variables for configuration\\n\\n## Generated with Legion\\n\\nThis project demonstrates the Legion framework's modular approach:\\n\\n- **JS Generator**: Created server, routes, and middleware modules\\n- **Package Manager**: Handled npm dependencies and configuration\\n- **Code Analysis**: Validated generated code for quality and security\\n- **Jester**: Executed comprehensive test suite\\n\\nThe modular approach allows for easy customization and extension.\\n"
          }
        }
      ]
    }
  ],
  "success_criteria": [
    {
      "description": "Complete project structure created",
      "condition": "${steps.setup-project-structure.success}"
    },
    {
      "description": "Express server and routes generated", 
      "condition": "${steps.generate-server-module.success} && ${steps.generate-api-routes.success}"
    },
    {
      "description": "Dependencies installed successfully",
      "condition": "${steps.install-api-dependencies.success}"
    },
    {
      "description": "Generated code passes validation",
      "condition": "${steps.validate-server-code.success}"
    },
    {
      "description": "All API tests passing",
      "condition": "${steps.run-api-tests.success}"
    },
    {
      "description": "Configuration and documentation complete",
      "condition": "${steps.create-env-template.success} && ${steps.create-api-documentation.success}"
    }
  ],
  "estimated_duration": "10-15 minutes",
  "complexity": "medium",
  "demonstrates": [
    "Complex multi-module code generation",
    "Express.js API architecture patterns", 
    "Security and middleware integration",
    "Comprehensive testing strategy",
    "Production-ready configuration",
    "Modular route and middleware organization"
  ]
}