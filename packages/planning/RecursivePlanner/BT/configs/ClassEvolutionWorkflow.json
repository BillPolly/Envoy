{
  "name": "ClassEvolutionWorkflow",
  "description": "Complete class lifecycle: generate, test, modify, and evolve classes",
  "version": "1.0.0",
  "input": {
    "className": {
      "type": "string",
      "required": true,
      "description": "Name of the class to work with"
    },
    "initialMethods": {
      "type": "array",
      "required": false,
      "description": "Initial methods to generate (for new classes)"
    },
    "modifications": {
      "type": "array",
      "required": false,
      "description": "List of modifications to apply"
    },
    "mode": {
      "type": "string",
      "required": true,
      "enum": ["generate", "modify", "refactor", "inspect"],
      "description": "Operation mode"
    },
    "description": {
      "type": "string",
      "required": false,
      "description": "Description of the class or changes"
    }
  },
  "output": {
    "classCode": {
      "type": "string",
      "description": "Final class code"
    },
    "testCode": {
      "type": "string",
      "description": "Final test code"
    },
    "modifications": {
      "type": "array",
      "description": "Applied modifications history"
    },
    "state": {
      "type": "object",
      "description": "Current class state"
    }
  },
  "implementation": {
    "type": "selector",
    "description": "Choose workflow based on mode",
    "children": [
      {
        "id": "generate-mode",
        "type": "sequence",
        "description": "Generate new class workflow",
        "condition": "{{mode}} === 'generate'",
        "children": [
          {
            "id": "generate-class",
            "type": "action",
            "tool": "classGenerator",
            "params": {
              "className": "{{className}}",
              "description": "{{description}}",
              "methods": "{{initialMethods}}"
            }
          },
          {
            "id": "generate-tests",
            "type": "action",
            "tool": "testGenerator",
            "params": {
              "className": "{{className}}",
              "methods": "{{initialMethods}}"
            }
          },
          {
            "id": "inspect-state",
            "type": "action",
            "tool": "stateInspector",
            "params": {
              "className": "{{className}}"
            }
          }
        ]
      },
      {
        "id": "modify-mode",
        "type": "sequence",
        "description": "Modify existing class workflow",
        "condition": "{{mode}} === 'modify'",
        "children": [
          {
            "id": "inspect-current",
            "type": "action",
            "tool": "stateInspector",
            "params": {
              "className": "{{className}}"
            }
          },
          {
            "id": "apply-modifications",
            "type": "sequence",
            "description": "Apply each modification",
            "children": [
              {
                "type": "selector",
                "description": "Choose modification type",
                "children": [
                  {
                    "id": "modify-method",
                    "type": "action",
                    "tool": "methodModifier",
                    "params": {
                      "className": "{{className}}",
                      "methodName": "{{modifications[0].methodName}}",
                      "newImplementation": "{{modifications[0].implementation}}",
                      "description": "{{modifications[0].description}}"
                    }
                  }
                ]
              },
              {
                "id": "update-tests",
                "type": "action",
                "tool": "testModifier",
                "params": {
                  "className": "{{className}}",
                  "methodName": "{{modifications[0].methodName}}"
                }
              }
            ]
          }
        ]
      },
      {
        "id": "refactor-mode",
        "type": "sequence",
        "description": "Refactor existing class workflow",
        "condition": "{{mode}} === 'refactor'",
        "children": [
          {
            "id": "inspect-before",
            "type": "action",
            "tool": "stateInspector",
            "params": {
              "className": "{{className}}"
            }
          },
          {
            "id": "apply-refactoring",
            "type": "action",
            "tool": "classRefactor",
            "params": {
              "className": "{{className}}",
              "changes": "{{modifications}}",
              "description": "{{description}}"
            }
          },
          {
            "id": "inspect-after",
            "type": "action",
            "tool": "stateInspector",
            "params": {
              "className": "{{className}}"
            }
          }
        ]
      },
      {
        "id": "inspect-mode",
        "type": "action",
        "tool": "stateInspector",
        "description": "Just inspect current state",
        "condition": "{{mode}} === 'inspect'",
        "params": {
          "className": "{{className}}"
        }
      }
    ]
  },
  "metadata": {
    "author": "RecursivePlanner BT Framework",
    "createdAt": "2025-01-06",
    "tags": ["class-evolution", "modification", "refactoring", "state-management"],
    "category": "development-tools",
    "examples": [
      {
        "title": "Generate new class",
        "input": {
          "className": "UserService",
          "mode": "generate",
          "initialMethods": ["createUser", "findUser"],
          "description": "User management service"
        }
      },
      {
        "title": "Modify existing method",
        "input": {
          "className": "UserService",
          "mode": "modify",
          "modifications": [
            {
              "methodName": "createUser",
              "implementation": "// Enhanced implementation with validation\nif (!data || !data.email) throw new Error('Valid email required');\nreturn this.create(data);",
              "description": "Added email validation"
            }
          ]
        }
      },
      {
        "title": "Refactor class structure",
        "input": {
          "className": "UserService",
          "mode": "refactor",
          "modifications": [
            { "type": "rename-method", "oldName": "createUser", "newName": "registerUser" },
            { "type": "add-property", "propertyName": "validationEnabled", "defaultValue": "true" }
          ],
          "description": "Renamed createUser to registerUser and added validation flag"
        }
      }
    ]
  }
}