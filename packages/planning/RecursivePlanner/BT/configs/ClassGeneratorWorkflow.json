{
  "name": "ClassGeneratorWorkflow",
  "description": "Complete class generation with testing and self-correction workflow",
  "version": "1.0.0",
  "input": {
    "className": {
      "type": "string",
      "required": true,
      "description": "Name of the class to generate"
    },
    "description": {
      "type": "string",
      "required": false,
      "description": "Description of what the class does"
    },
    "methods": {
      "type": "array",
      "required": true,
      "description": "List of method names to implement"
    }
  },
  "output": {
    "classCode": {
      "type": "string",
      "description": "Generated class code"
    },
    "testCode": {
      "type": "string", 
      "description": "Generated test code"
    },
    "filePath": {
      "type": "string",
      "description": "Path to the generated class file"
    },
    "testPath": {
      "type": "string",
      "description": "Path to the generated test file"
    },
    "testsPassed": {
      "type": "boolean",
      "description": "Whether all tests passed"
    },
    "totalAttempts": {
      "type": "number",
      "description": "Number of attempts made to get working code"
    }
  },
  "implementation": {
    "type": "retry",
    "maxAttempts": 3,
    "child": {
      "type": "sequence",
      "children": [
        {
          "id": "generate-class",
          "type": "action",
          "tool": "classGenerator",
          "description": "Generate the JavaScript class",
          "params": {
            "className": "{{className}}",
            "description": "{{description}}",
            "methods": "{{methods}}"
          }
        },
        {
          "id": "generate-tests",
          "type": "action", 
          "tool": "testGenerator",
          "description": "Generate test file for the class",
          "params": {
            "className": "{{className}}",
            "methods": "{{methods}}"
          }
        },
        {
          "id": "validate-success",
          "type": "selector",
          "description": "Check if tests pass or attempt to fix",
          "children": [
            {
              "type": "sequence",
              "description": "Try running tests and validate success",
              "children": [
                {
                  "id": "run-tests",
                  "type": "action",
                  "tool": "testRunner",
                  "description": "Execute the tests",
                  "params": {
                    "className": "{{className}}"
                  }
                },
                {
                  "type": "action",
                  "tool": "successValidator",
                  "description": "Validate that all tests passed",
                  "params": {
                    "testResults": "{{run-tests.data}}"
                  }
                }
              ]
            },
            {
              "type": "sequence",
              "description": "Fix code if tests failed",
              "children": [
                {
                  "id": "fix-code",
                  "type": "action",
                  "tool": "codeFixer",
                  "description": "Analyze failures and fix code",
                  "params": {
                    "className": "{{className}}",
                    "testResults": "{{run-tests.data}}"
                  }
                },
                {
                  "type": "action",
                  "tool": "successValidator",
                  "description": "Re-validate after fixes",
                  "params": {
                    "testResults": {
                      "passed": 1,
                      "failed": 0,
                      "totalTests": 1
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  },
  "metadata": {
    "author": "RecursivePlanner BT Framework",
    "createdAt": "2025-01-06",
    "tags": ["code-generation", "testing", "self-correction", "development"],
    "category": "development-tools",
    "examples": [
      {
        "input": {
          "className": "UserManager",
          "description": "Manages user operations",
          "methods": ["addUser", "getUser", "updateUser", "deleteUser", "listUsers"]
        },
        "expectedOutput": {
          "classCode": "class UserManager { ... }",
          "testCode": "describe('UserManager', () => { ... })",
          "testsPassed": true,
          "totalAttempts": 1
        }
      },
      {
        "input": {
          "className": "Calculator",
          "description": "Basic calculator operations", 
          "methods": ["add", "subtract", "multiply", "divide"]
        },
        "expectedOutput": {
          "classCode": "class Calculator { ... }",
          "testCode": "describe('Calculator', () => { ... })",
          "testsPassed": true,
          "totalAttempts": 1
        }
      }
    ]
  }
}