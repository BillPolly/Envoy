{
  "name": "TestSuiteGenerator", 
  "description": "Creates comprehensive test suites with high coverage for existing code",
  "domains": ["testing", "quality-assurance", "code-analysis", "coverage"],
  "capabilities": [
    "test-analysis",
    "unit-test-generation",
    "integration-test-generation",
    "test-execution",
    "coverage-analysis", 
    "test-improvement"
  ],
  "toolDependencies": [
    "codeAnalyzer",
    "testGenerator",
    "testRunner",
    "coverageAnalyzer",
    "mockGenerator"
  ],
  "promptTemplate": "test-suite-generator.md",
  "examples": [
    {
      "goal": "Create comprehensive test suite for UserService class",
      "codeLocation": "src/services/UserService.js",
      "testTypes": ["unit", "integration"],
      "coverageTarget": 95,
      "testFramework": "jest",
      "requirements": [
        "Test all public methods",
        "Include edge case testing",
        "Mock external dependencies",
        "Achieve >95% coverage",
        "Test error handling"
      ]
    }
  ],
  "parameters": {
    "codeLocation": {
      "type": "string", 
      "description": "Path to code that needs testing",
      "required": true
    },
    "testFramework": {
      "type": "string",
      "description": "Testing framework to use",
      "default": "jest",
      "options": ["jest", "mocha", "vitest", "jasmine"]
    },
    "testTypes": {
      "type": "array",
      "description": "Types of tests to generate",
      "default": ["unit", "integration"],
      "items": {
        "type": "string",
        "enum": ["unit", "integration", "e2e", "performance"]
      }
    },
    "coverageTarget": {
      "type": "number",
      "description": "Target test coverage percentage",
      "default": 90,
      "minimum": 50,
      "maximum": 100
    },
    "mockDependencies": {
      "type": "boolean",
      "description": "Whether to mock external dependencies",
      "default": true
    },
    "includeEdgeCases": {
      "type": "boolean", 
      "description": "Include edge case and boundary testing",
      "default": true
    }
  },
  "orchestration": {
    "enabled": true,
    "maxReplanAttempts": 3,
    "executionStrategy": "sequential",
    "continueOnFailure": true,
    "stepTimeout": 120000
  },
  "temperature": 0.3,
  "maxRetries": 2, 
  "debugMode": false
}