{
  "name": "ClassGenerator",
  "description": "Generates a complete class with comprehensive testing, documentation, and validation",
  "domains": ["code", "testing", "documentation"],
  "capabilities": ["code-generation", "test-creation", "documentation"],
  
  "input": {
    "className": {
      "type": "string",
      "required": true,
      "description": "Name of the class to generate (e.g., 'UserManager')"
    },
    "methods": {
      "type": "array",
      "items": { "type": "string" },
      "default": [],
      "description": "List of method names to include (e.g., ['authenticate', 'validate'])"
    },
    "requirements": {
      "type": "object",
      "description": "Additional requirements for class generation",
      "properties": {
        "testCoverage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "default": 90,
          "description": "Required test coverage percentage"
        },
        "includeDocumentation": {
          "type": "boolean",
          "default": true,
          "description": "Whether to generate API documentation"
        },
        "codeStyle": {
          "type": "string",
          "default": "standard",
          "description": "Code style to follow"
        }
      }
    }
  },

  "output": {
    "status": {
      "type": "string",
      "enum": ["SUCCESS", "FAILURE"],
      "description": "Execution status"
    },
    "classCode": {
      "type": "string",
      "description": "Generated class source code"
    },
    "testCode": {
      "type": "string", 
      "description": "Generated test suite"
    },
    "documentation": {
      "type": "string",
      "description": "Generated API documentation"
    },
    "metrics": {
      "type": "object",
      "description": "Code quality metrics",
      "properties": {
        "testCoverage": { "type": "number" },
        "linesOfCode": { "type": "number" },
        "complexity": { "type": "number" }
      }
    },
    "artifacts": {
      "type": "object",
      "description": "Generated files and their paths"
    }
  },

  "outputTransform": {
    "classCode": "artifacts.classFile.content",
    "testCode": "artifacts.testFile.content", 
    "documentation": "artifacts.docFile.content",
    "metrics": "analysis.metrics"
  },

  "implementation": {
    "type": "sequence",
    "debugMode": true,
    "children": [
      {
        "type": "action",
        "tool": "FileSystemModule.writeFile",
        "description": "Create requirements specification",
        "params": {
          "path": "{{className}}_requirements.md",
          "content": "# {{className}} Requirements\n\nClass: {{className}}\nMethods: {{methods}}\nTest Coverage: {{requirements.testCoverage}}%\nCode Style: {{requirements.codeStyle}}\n"
        }
      },
      {
        "type": "selector",
        "description": "Choose generation approach based on complexity",
        "children": [
          {
            "type": "sequence",
            "description": "Simple class generation for basic requirements",
            "children": [
              {
                "type": "condition",
                "check": "{{methods.length}} <= 3",
                "description": "Check if class is simple (3 or fewer methods)"
              },
              {
                "type": "action",
                "tool": "simpleClassGenerator",
                "params": {
                  "className": "{{className}}",
                  "methods": "{{methods}}",
                  "style": "{{requirements.codeStyle}}"
                }
              }
            ]
          },
          {
            "type": "sequence", 
            "description": "Advanced generation for complex classes",
            "children": [
              {
                "type": "action",
                "tool": "architecturalPlanner",
                "params": {
                  "className": "{{className}}",
                  "methods": "{{methods}}",
                  "requirements": "{{requirements}}"
                }
              },
              {
                "type": "retry",
                "maxAttempts": 3,
                "description": "Generate class with retry logic",
                "child": {
                  "type": "action",
                  "tool": "advancedClassGenerator",
                  "params": {
                    "plan": "{{architecturalPlanner.result}}",
                    "className": "{{className}}"
                  }
                }
              }
            ]
          }
        ]
      },
      {
        "type": "parallel",
        "successPolicy": "all",
        "description": "Generate tests and documentation in parallel",
        "children": [
          {
            "type": "sequence",
            "description": "Test generation workflow",
            "children": [
              {
                "type": "action",
                "tool": "testGenerator",
                "params": {
                  "sourceCode": "{{classCode}}",
                  "className": "{{className}}",
                  "targetCoverage": "{{requirements.testCoverage}}"
                }
              },
              {
                "type": "action",
                "tool": "testRunner",
                "params": {
                  "testCode": "{{testGenerator.result}}"
                }
              },
              {
                "type": "selector",
                "description": "Ensure coverage target met",
                "children": [
                  {
                    "type": "condition",
                    "check": "{{testRunner.result.coverage}} >= {{requirements.testCoverage}}"
                  },
                  {
                    "type": "sequence",
                    "description": "Generate additional tests if coverage insufficient",
                    "children": [
                      {
                        "type": "action",
                        "tool": "additionalTestGenerator",
                        "params": {
                          "existingTests": "{{testGenerator.result}}",
                          "coverageGap": "{{requirements.testCoverage}} - {{testRunner.result.coverage}}"
                        }
                      },
                      {
                        "type": "action",
                        "tool": "testRunner",
                        "params": {
                          "testCode": "{{testGenerator.result}} + {{additionalTestGenerator.result}}"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "sequence",
            "description": "Documentation generation",
            "condition": "{{requirements.includeDocumentation}} === true",
            "children": [
              {
                "type": "action",
                "tool": "docGenerator",
                "params": {
                  "sourceCode": "{{classCode}}",
                  "className": "{{className}}",
                  "methods": "{{methods}}"
                }
              },
              {
                "type": "action",
                "tool": "docValidator",
                "params": {
                  "documentation": "{{docGenerator.result}}"
                }
              }
            ]
          },
          {
            "type": "action",
            "tool": "staticAnalyzer",
            "description": "Analyze code quality metrics",
            "params": {
              "sourceCode": "{{classCode}}"
            }
          }
        ]
      },
      {
        "type": "action",
        "tool": "FileSystemModule.writeFile",
        "description": "Save generated class",
        "params": {
          "path": "{{className}}.js",
          "content": "{{classCode}}"
        }
      },
      {
        "type": "action",
        "tool": "FileSystemModule.writeFile", 
        "description": "Save test file",
        "params": {
          "path": "{{className}}.test.js",
          "content": "{{testCode}}"
        }
      },
      {
        "type": "action",
        "tool": "FileSystemModule.writeFile",
        "description": "Save documentation",
        "condition": "{{requirements.includeDocumentation}} === true",
        "params": {
          "path": "{{className}}.md",
          "content": "{{documentation}}"
        }
      }
    ]
  }
}