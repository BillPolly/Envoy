{
  "id": "plan-m59mlkdr9-6o0ovzdjy",
  "name": "Create Addition API Server",
  "description": "Create a Node.js server with an API endpoint that adds two numbers",
  "version": "1.0.0",
  "metadata": {
    "createdAt": "2025-08-05T02:25:35.851Z",
    "createdBy": "ProfilePlannerTool",
    "estimatedDuration": 15,
    "complexity": "medium",
    "profile": "javascript-development",
    "tags": [
      "nodejs",
      "api",
      "express"
    ]
  },
  "context": {
    "task": "create a simple node server that has an api endpoint that adds 2 numbers",
    "profile": "javascript-development",
    "timestamp": "2025-08-05T02:25:35.851Z"
  },
  "inputs": [],
  "requiredOutputs": [],
  "steps": [
    {
      "id": "step-1",
      "name": "Initialize Node.js project",
      "description": "Create package.json file for the Node.js project",
      "type": "action",
      "estimatedDuration": 2,
      "inputs": [],
      "outputs": [
        "package.json"
      ],
      "actions": [
        {
          "id": "action-1-1",
          "type": "file_write",
          "parameters": {
            "filepath": "package.json",
            "content": "{\n  \"name\": \"addition-api-server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple Node.js server with an API endpoint to add two numbers\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"node server.js\"\n  },\n  \"keywords\": [\"nodejs\", \"api\", \"addition\"],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.18.2\"\n  }\n}"
          }
        }
      ],
      "dependencies": []
    },
    {
      "id": "step-2",
      "name": "Create server with addition endpoint",
      "description": "Create the main server file with Express and the addition API endpoint",
      "type": "action",
      "estimatedDuration": 5,
      "inputs": [
        "package.json"
      ],
      "outputs": [
        "server.js"
      ],
      "actions": [
        {
          "id": "action-2-1",
          "type": "file_write",
          "parameters": {
            "filepath": "server.js",
            "content": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware to parse JSON requests\napp.use(express.json());\n\n// Addition API endpoint\napp.post('/api/add', (req, res) => {\n  const { a, b } = req.body;\n  \n  // Validate inputs\n  if (typeof a !== 'number' || typeof b !== 'number') {\n    return res.status(400).json({\n      error: 'Both a and b must be numbers',\n      example: { a: 5, b: 3 }\n    });\n  }\n  \n  const result = a + b;\n  \n  res.json({\n    a: a,\n    b: b,\n    result: result\n  });\n});\n\n// GET endpoint for testing\napp.get('/api/add', (req, res) => {\n  res.json({\n    message: 'Addition API endpoint',\n    usage: 'Send a POST request to /api/add with JSON body containing \"a\" and \"b\" numbers',\n    example: {\n      request: { a: 5, b: 3 },\n      response: { a: 5, b: 3, result: 8 }\n    }\n  });\n});\n\n// Root endpoint\napp.get('/', (req, res) => {\n  res.json({\n    message: 'Addition API Server',\n    endpoints: [\n      {\n        method: 'POST',\n        path: '/api/add',\n        description: 'Add two numbers',\n        body: { a: 'number', b: 'number' }\n      },\n      {\n        method: 'GET',\n        path: '/api/add',\n        description: 'Get API usage information'\n      }\n    ]\n  });\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Addition API server is running on http://localhost:${PORT}`);\n  console.log(`Test the API: curl -X POST http://localhost:${PORT}/api/add -H \"Content-Type: application/json\" -d '{\"a\":5,\"b\":3}'`);\n});"
          }
        }
      ],
      "dependencies": [
        "step-1"
      ]
    },
    {
      "id": "step-3",
      "name": "Install dependencies",
      "description": "Install Express dependency using npm",
      "type": "action",
      "estimatedDuration": 3,
      "inputs": [
        "package.json"
      ],
      "outputs": [
        "node_modules",
        "package-lock.json"
      ],
      "actions": [
        {
          "id": "action-3-1",
          "type": "command_executor",
          "parameters": {
            "command": "npm install"
          }
        }
      ],
      "dependencies": [
        "step-1"
      ]
    },
    {
      "id": "step-4",
      "name": "Create test file",
      "description": "Create a simple test file to verify the addition endpoint",
      "type": "action",
      "estimatedDuration": 3,
      "inputs": [
        "server.js"
      ],
      "outputs": [
        "test-api.js"
      ],
      "actions": [
        {
          "id": "action-4-1",
          "type": "file_write",
          "parameters": {
            "filepath": "test-api.js",
            "content": "// Simple test script for the addition API\nconst http = require('http');\n\nconst testData = [\n  { a: 5, b: 3, expected: 8 },\n  { a: -10, b: 5, expected: -5 },\n  { a: 0, b: 0, expected: 0 },\n  { a: 100, b: 200, expected: 300 }\n];\n\nfunction testAdditionAPI() {\n  console.log('Testing Addition API...');\n  \n  testData.forEach((test, index) => {\n    const data = JSON.stringify({ a: test.a, b: test.b });\n    \n    const options = {\n      hostname: 'localhost',\n      port: 3000,\n      path: '/api/add',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Length': data.length\n      }\n    };\n    \n    const req = http.request(options, (res) => {\n      let responseData = '';\n      \n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      \n      res.on('end', () => {\n        const result = JSON.parse(responseData);\n        const passed = result.result === test.expected;\n        console.log(`Test ${index + 1}: ${test.a} + ${test.b} = ${result.result} ${passed ? '✓' : '✗'} (expected: ${test.expected})`);\n      });\n    });\n    \n    req.on('error', (error) => {\n      console.error(`Test ${index + 1} failed:`, error.message);\n      console.log('Make sure the server is running on port 3000');\n    });\n    \n    req.write(data);\n    req.end();\n  });\n}\n\n// Wait a moment for server to be ready\nsetTimeout(testAdditionAPI, 1000);\n\nconsole.log('Note: Make sure the server is running before running this test.');\nconsole.log('Run the server with: npm start');"
          }
        }
      ],
      "dependencies": [
        "step-2"
      ]
    },
    {
      "id": "step-5",
      "name": "Create README",
      "description": "Create a README file with instructions",
      "type": "action",
      "estimatedDuration": 2,
      "inputs": [
        "server.js",
        "package.json"
      ],
      "outputs": [
        "README.md"
      ],
      "actions": [
        {
          "id": "action-5-1",
          "type": "file_write",
          "parameters": {
            "filepath": "README.md",
            "content": "# Addition API Server\n\nA simple Node.js server that provides an API endpoint to add two numbers.\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Running the Server\n\n```bash\nnpm start\n```\n\nThe server will start on `http://localhost:3000`\n\n## API Endpoints\n\n### POST /api/add\n\nAdds two numbers and returns the result.\n\n**Request Body:**\n```json\n{\n  \"a\": 5,\n  \"b\": 3\n}\n```\n\n**Response:**\n```json\n{\n  \"a\": 5,\n  \"b\": 3,\n  \"result\": 8\n}\n```\n\n**Example using curl:**\n```bash\ncurl -X POST http://localhost:3000/api/add \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"a\":5,\"b\":3}'\n```\n\n### GET /api/add\n\nReturns usage information for the addition API.\n\n### GET /\n\nReturns information about all available endpoints.\n\n## Testing\n\nRun the test script (make sure the server is running first):\n\n```bash\nnode test-api.js\n```\n\n## Error Handling\n\nThe API validates that both `a` and `b` are numbers. If invalid input is provided, it returns a 400 error with an explanation."
          }
        }
      ],
      "dependencies": [
        "step-2",
        "step-4"
      ]
    }
  ],
  "executionOrder": [
    "step-1",
    "step-2",
    "step-3",
    "step-4",
    "step-5"
  ],
  "successCriteria": [
    "Node.js project initialized with package.json",
    "Express server created with addition API endpoint",
    "Dependencies installed successfully",
    "Server can be started and responds to requests",
    "Addition endpoint correctly adds two numbers"
  ]
}