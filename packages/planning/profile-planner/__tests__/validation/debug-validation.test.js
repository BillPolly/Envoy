/**
 * Debug test to find where "receive" and "CREATE" fields are coming from
 */

import { describe, test, expect, beforeAll } from '@jest/globals';
import { ValidatePlanTool } from '@legion/plan-executor-tools';
import { ModuleLoader } from '@legion/tool-core';

describe('Debug Validation', () => {
  let validatePlanTool;
  let moduleLoader;

  beforeAll(async () => {
    moduleLoader = new ModuleLoader();
    await moduleLoader.initialize();
    validatePlanTool = new ValidatePlanTool(moduleLoader);
  });

  test('should validate exact plan structure from log', async () => {
    // This is the exact structure that would be generated by the LLM
    const plan = {
      id: 'plan-nodejs-server',
      name: 'Create Node.js Server',
      description: 'Plan to create a basic Node.js server',
      status: 'draft',
      version: '1.0.0',
      inputs: [],
      requiredOutputs: [],
      metadata: {
        createdAt: new Date().toISOString(),
        createdBy: 'GenericPlanner',
        complexity: 'medium'
      },
      steps: [
        {
          id: 'step-1',
          name: 'Initialize project',
          description: 'Set up Node.js project structure',
          actions: [
            {
              id: 'action-1',
              toolName: 'directory_create',
              inputs: {
                path: '@projectDir'
              },
              outputs: {
                success: 'projectDirCreated'
              }
            }
          ]
        },
        {
          id: 'step-2',
          name: 'Create package.json',
          description: 'Initialize npm project',
          actions: [
            {
              id: 'action-2',
              toolName: 'file_write',
              inputs: {
                filepath: '@projectDir/package.json',
                content: JSON.stringify({
                  name: 'nodejs-server',
                  version: '1.0.0',
                  description: 'A basic Node.js server',
                  main: 'server.js',
                  scripts: {
                    start: 'node server.js'
                  }
                }, null, 2)
              },
              outputs: {
                filepath: 'packageJsonPath'
              }
            }
          ]
        },
        {
          id: 'step-3',
          name: 'Create server file',
          description: 'Create the main server.js file',
          actions: [
            {
              id: 'action-3',
              toolName: 'file_write',
              inputs: {
                filepath: '@projectDir/server.js',
                content: `const http = require('http');

const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello World!');
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(\`Server running on port \${PORT}\`);
});`
              },
              outputs: {
                filepath: 'serverFilePath'
              }
            }
          ]
        }
      ]
    };

    console.log('Testing plan:', JSON.stringify(plan, null, 2));
    
    // Log the plan object before validation
    console.log('\n=== PLAN OBJECT BEFORE VALIDATION ===');
    console.log('Plan keys:', Object.keys(plan));
    console.log('Steps:', plan.steps.length);
    plan.steps.forEach((step, i) => {
      console.log(`Step ${i} keys:`, Object.keys(step));
      if (step.actions) {
        step.actions.forEach((action, j) => {
          console.log(`  Action ${j} keys:`, Object.keys(action));
        });
      }
    });

    // Validate the plan
    const result = await validatePlanTool.execute({ 
      plan: plan,
      verbose: true
    });
    
    console.log('\n=== VALIDATION RESULT ===');
    console.log('Valid:', result.valid);
    console.log('Errors:', result.errors);
    
    // Check for the mysterious fields
    const planStr = JSON.stringify(plan);
    console.log('\nChecking for mysterious fields:');
    console.log('Contains "receive":', planStr.includes('"receive"'));
    console.log('Contains "CREATE":', planStr.includes('"CREATE"'));
    
    expect(result.valid).toBe(true);
  });

  test('should test with minimal plan', async () => {
    const minimalPlan = {
      id: 'minimal-plan',
      name: 'Minimal Plan',
      description: 'Minimal test plan',
      steps: [
        {
          id: 'step-1',
          name: 'Test Step',
          actions: [
            {
              toolName: 'file_write',
              inputs: {
                filepath: 'test.txt',
                content: 'test'
              }
            }
          ]
        }
      ]
    };

    console.log('\n=== MINIMAL PLAN TEST ===');
    console.log('Plan:', JSON.stringify(minimalPlan, null, 2));
    
    const result = await validatePlanTool.execute({ 
      plan: minimalPlan,
      verbose: true
    });
    
    console.log('Valid:', result.valid);
    console.log('Errors:', result.errors);
    
    expect(result).toBeDefined();
  });
});