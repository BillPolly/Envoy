{
  "name": "javascript-development-clean",
  "toolName": "javascript_development_planner_clean",
  "description": "Clean JavaScript development planner using new input/output architecture",
  "requiredModules": [
    "file",
    "command-executor",
    "js-generator"
  ],
  "defaultInputs": [
    "user_request",
    "project_context", 
    "project_type"
  ],
  "defaultOutputs": [],
  "maxSteps": 15,
  "contextPrompts": [
    "You are an expert JavaScript developer creating production-ready applications.",
    "Use the new inputs/outputs system: inputs are either constants or @variable references.",
    "Variables from action outputs can be used in subsequent action inputs with @variableName syntax.",
    "Always create directories before writing files into them.",
    "Include proper error handling and testing in your applications."
  ],
  "allowableActions": [
    {
      "type": "directory_create",
      "description": "Create a directory at the specified path",
      "inputs": {
        "dirpath": "string - Path of directory to create",
        "operation": "string - Set to 'create' for directory creation"
      },
      "outputs": {
        "dirpath": "Directory path that was created",
        "created": "Boolean indicating if new directory was created"
      },
      "examples": [
        {
          "description": "Create project directory",
          "inputs": {
            "dirpath": "./my-app",
            "operation": "create"
          },
          "outputs": {
            "dirpath": "projectDir",
            "created": "projectCreated"
          }
        }
      ]
    },
    {
      "type": "file_write", 
      "description": "Write content to a file",
      "inputs": {
        "filepath": "string - Path where file should be written",
        "content": "string|object - Content to write to file"
      },
      "outputs": {
        "filepath": "Path of the created/updated file",
        "bytesWritten": "Number of bytes written",
        "created": "Boolean indicating if new file was created"
      },
      "examples": [
        {
          "description": "Create package.json in project directory", 
          "inputs": {
            "filepath": "@projectDir/package.json",
            "content": {
              "name": "my-app",
              "version": "1.0.0",
              "description": "A sample Node.js application",
              "main": "src/index.js",
              "scripts": {
                "start": "node src/index.js",
                "test": "jest"
              }
            }
          },
          "outputs": {
            "filepath": "packageJsonPath",
            "bytesWritten": "packageJsonSize", 
            "created": "packageJsonCreated"
          }
        }
      ]
    },
    {
      "type": "generate_javascript_module",
      "description": "Generate a complete JavaScript module",
      "inputs": {
        "name": "string - Module name",
        "functions": "array - Function definitions to include",
        "writeToFile": "boolean - Whether to write to disk",
        "projectPath": "string - Project root directory",
        "outputPath": "string - Relative path for output file"
      },
      "outputs": {
        "code": "Generated JavaScript code",
        "filename": "Suggested filename",
        "filePath": "Full path to written file (if writeToFile=true)",
        "written": "Boolean indicating if file was written"
      },
      "examples": [
        {
          "description": "Generate main application file",
          "inputs": {
            "name": "app", 
            "functions": [
              {
                "name": "main",
                "params": [],
                "body": "console.log('Hello World!');",
                "isExport": true
              }
            ],
            "writeToFile": true,
            "projectPath": "@projectDir",
            "outputPath": "src/index.js"
          },
          "outputs": {
            "code": "generatedCode",
            "filePath": "mainFilePath",
            "written": "mainFileWritten"
          }
        }
      ]
    }
  ],
  "planningGuidance": [
    "Start by creating the project directory structure",
    "Create package.json with proper dependencies and scripts", 
    "Generate source code files using the js-generator",
    "Add README and other documentation files",
    "Variables can be chained: create directory -> use @dirName in file paths"
  ]
}