{
  "name": "python",
  "toolName": "python_planner",
  "description": "Plan Python development tasks with testing and package management",
  "requiredModules": ["file", "python-runner"],
  "defaultInputs": ["user_request", "project_context"],
  "defaultOutputs": ["file_created", "project_created", "test_results"],
  "maxSteps": 25,
  "contextPrompts": [
    "You are working in a Python development environment.",
    "Use modern Python 3.x syntax with type hints where appropriate.",
    "Follow PEP 8 style guidelines for Python code.",
    "Use pytest as the testing framework unless specified otherwise.",
    "Test files should be named with test_ prefix or _test suffix.",
    "Include docstrings for all functions and classes.",
    "Use virtual environments for dependency management.",
    "When creating requirements.txt, include appropriate versions.",
    "Use Legion tools: file_write for creating files, file_read for reading files, python_run_command for executing commands."
  ],
  "allowableActions": [
    {
      "type": "create_python_file",
      "description": "Create a Python file with specified content",
      "inputs": {
        "file_path": {
          "type": "string",
          "description": "Relative path from project root where file should be created (e.g., 'src/calculator.py')",
          "examples": ["src/main.py", "lib/utils.py", "tests/test_helper.py"]
        },
        "content": {
          "type": "string",
          "description": "Python code content to write to the file, properly formatted with appropriate imports and docstrings"
        }
      },
      "outputs": {
        "file_created": {
          "type": "string",
          "description": "Path to the created file"
        }
      }
    },
    {
      "type": "create_requirements_txt",
      "description": "Create a requirements.txt file for Python dependencies",
      "inputs": {
        "dependencies": {
          "type": "array",
          "description": "Array of package specifications",
          "examples": [["pytest>=7.0.0", "requests==2.28.0", "numpy"]]
        }
      },
      "outputs": {
        "requirements_created": {
          "type": "boolean",
          "description": "True if requirements.txt was successfully created"
        }
      }
    },
    {
      "type": "create_pytest_file",
      "description": "Create a pytest test file for testing Python functions",
      "inputs": {
        "test_file_path": {
          "type": "string",
          "description": "Path where test file should be created (must start with test_ or end with _test.py)",
          "examples": ["tests/test_calculator.py", "src/calculator_test.py"]
        },
        "test_content": {
          "type": "string",
          "description": "Complete test code including imports and test functions"
        }
      },
      "outputs": {
        "test_file_created": {
          "type": "string",
          "description": "Path to the created test file"
        }
      }
    },
    {
      "type": "install_python_packages",
      "description": "Install Python packages using pip",
      "inputs": {
        "package_names": {
          "type": "array",
          "description": "Array of package names to install",
          "examples": [["pytest"], ["flask", "sqlalchemy"], ["numpy", "pandas"]]
        }
      },
      "outputs": {
        "packages_installed": {
          "type": "boolean",
          "description": "True if all packages were successfully installed"
        }
      }
    },
    {
      "type": "run_python_script",
      "description": "Execute a Python script and capture its output",
      "inputs": {
        "script_path": {
          "type": "string",
          "description": "Relative path to the Python script to execute",
          "examples": ["src/main.py", "scripts/process.py"]
        }
      },
      "outputs": {
        "script_output": {
          "type": "string",
          "description": "Console output from the executed script"
        }
      }
    },
    {
      "type": "run_pytest",
      "description": "Run pytest to execute test suite",
      "inputs": {
        "test_pattern": {
          "type": "string",
          "description": "Pattern to match test files (optional)",
          "required": false,
          "examples": ["test_calculator.py", "tests/", "*_test.py"]
        }
      },
      "outputs": {
        "test_results": {
          "type": "object",
          "description": "Test execution results including passed/failed counts"
        }
      }
    },
    {
      "type": "create_python_project",
      "description": "Create a basic Python project structure",
      "inputs": {
        "project_name": {
          "type": "string",
          "description": "Name of the project",
          "examples": ["my-calculator", "web-app"]
        }
      },
      "outputs": {
        "project_created": {
          "type": "object",
          "description": "Details about created project structure"
        }
      }
    },
    {
      "type": "setup_virtual_env",
      "description": "Create and activate a Python virtual environment",
      "inputs": {
        "env_name": {
          "type": "string",
          "description": "Name of the virtual environment",
          "default": "venv"
        }
      },
      "outputs": {
        "venv_created": {
          "type": "boolean",
          "description": "True if virtual environment was created"
        }
      }
    }
  ],
  "templates": {
    "pythonFunction": "def {{FUNCTION_NAME}}({{PARAMETERS}}) -> {{RETURN_TYPE}}:\n    \"\"\"\n    {{FUNCTION_DESCRIPTION}}\n    \n    Args:\n        {{PARAMETER_DOCS}}\n    \n    Returns:\n        {{RETURN_DESCRIPTION}}\n    \"\"\"\n    {{FUNCTION_BODY}}",
    "pytestTest": "import pytest\nfrom {{MODULE_PATH}} import {{MODULE_NAME}}\n\n\ndef test_{{TEST_NAME}}():\n    \"\"\"{{TEST_DESCRIPTION}}\"\"\"\n    {{TEST_BODY}}"
  }
}